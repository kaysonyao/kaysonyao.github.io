<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用仓库分支管理Hexo网站和代码]]></title>
      <url>http://yoursite.com/2016/10/09/%E4%BD%BF%E7%94%A8%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86Hexo%E7%BD%91%E7%AB%99%E5%92%8C%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>搭建完Hexo后，一直在同一台PC上更新，想到如果换了电脑就不好继续了。最初的做法是建立新的仓库，将代码放到新仓库，每次修改后hexo d 部署到就仓库，然后push代码到新仓库，虽然不用修改配置，但总觉得GitHub上建了2个Repositories不是很爽，所以使用了同一个repositorie的不同分支来部署Hexo和代码。<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于hexo在本地已经安装并且网站已部署到GitHub，而且对git不是很熟，我选择保留本地代码删除重建GitHub上repository</p>
<h2 id="hexo代码分支操作"><a href="#hexo代码分支操作" class="headerlink" title="hexo代码分支操作"></a>hexo代码分支操作</h2><h3 id="新建repository"><a href="#新建repository" class="headerlink" title="新建repository"></a>新建repository</h3><p>因为我是删除了原本的repository重头开始，所以这边需要新建一个新的，repository名称部署成功过的都知道，如果不是用二级域名访问，就需要yourname.github.io的形式：<br><img src="/img/createnew.jpg" alt="createnew"><br><em>建议勾上Readme.md，这样默认就创建了master分支</em></p>
<h3 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h3><ol>
<li>打开gitbash，进入hexo目录</li>
<li><p>建立git仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
</li>
<li><p>将项目的所有文件添加到仓库中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果想添加某个特定的文件，只需把.换成特定的文件名即可</p>
<ol>
<li>将add的文件commit到仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"注释语句"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="将本地的仓库关联到github上"><a href="#将本地的仓库关联到github上" class="headerlink" title="将本地的仓库关联到github上"></a>将本地的仓库关联到github上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:kaysonyao/kaysonyao.github.io.git</div></pre></td></tr></table></figure>
<h3 id="将远程分支文件拉下来（避免冲突）"><a href="#将远程分支文件拉下来（避免冲突）" class="headerlink" title="将远程分支文件拉下来（避免冲突）"></a>将远程分支文件拉下来（避免冲突）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master</div></pre></td></tr></table></figure>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>创建本地hexo分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch hexo</div></pre></td></tr></table></figure></p>
<h3 id="切换至hexo分支"><a href="#切换至hexo分支" class="headerlink" title="切换至hexo分支"></a>切换至hexo分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout hexo</div></pre></td></tr></table></figure>
<h3 id="将本地资源同步推到GitHub的Hexo分支（自己创建）"><a href="#将本地资源同步推到GitHub的Hexo分支（自己创建）" class="headerlink" title="将本地资源同步推到GitHub的Hexo分支（自己创建）"></a>将本地资源同步推到GitHub的Hexo分支（自己创建）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin hexo</div></pre></td></tr></table></figure>
<p><strong>至此hexo代码已经上传至远程仓库的hexo分支</strong></p>
<h2 id="hexo发布"><a href="#hexo发布" class="headerlink" title="hexo发布"></a>hexo发布</h2><p>hexo发布和之前没有区别，因为没有切换环境，所以不需要重新安装nodejs、hexo等<br>仍然可使用 hexo g -d  来部署<br><strong>注意</strong> _config.yml 文件依旧需要保持原地址和master分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">repository: https://github.com/kaysonyao/kaysonyao.github.io.git</div><div class="line">branch: master</div></pre></td></tr></table></figure></p>
<h2 id="修改hexo代码后提交"><a href="#修改hexo代码后提交" class="headerlink" title="修改hexo代码后提交"></a>修改hexo代码后提交</h2><p>依次执行下面语句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"..."</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin hexo</div></pre></td></tr></table></figure>
<h2 id="更换电脑后同步管理"><a href="#更换电脑后同步管理" class="headerlink" title="更换电脑后同步管理"></a>更换电脑后同步管理</h2><p><strong>前提：</strong>需要在GitHub上将hexo分支作为Default分支<br><strong>参考资料：</strong><a href="http://blog.yaock.com/2016/10/09/%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E7%BB%B4%E6%8A%A4GitHub%E4%BB%A3%E7%A0%81/" title="使用多台电脑维护GitHub代码" target="_blank" rel="external">http://blog.yaock.com/2016/10/09/%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E7%BB%B4%E6%8A%A4GitHub%E4%BB%A3%E7%A0%81/</a><br>具体操作步骤如下：</p>
<ol>
<li>在电脑2上完成git的安装和配置</li>
<li>在电脑2上创建SSH Key</li>
<li>在GitHub上添加新建的SSH Key</li>
<li>将远程库克隆到本地电脑2上（默认分支为hexo）</li>
<li>在本地新拷贝的kaysonyao.github.io目录下通过Git bash依次执行下列指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git</div></pre></td></tr></table></figure>
<p><strong>注：</strong> *不需要hexo init这条指令</p>
<h2 id="日常修改操作"><a href="#日常修改操作" class="headerlink" title="日常修改操作"></a>日常修改操作</h2><p>在本地对博客进行修改后，通过下面的步骤进行管理：</p>
<ol>
<li><p>将最新代码同步至本地,执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin hexo</div></pre></td></tr></table></figure>
</li>
<li><p>依次执行下面指令，将改动推送到GitHub（此时当前分支应为hexo）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"注释语句"</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin hexo</div></pre></td></tr></table></figure>
<ol>
<li>发布hexo网站到master分支上，执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g <span class="_">-d</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>虽然1、2个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的<br>（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用多台电脑维护GitHub代码]]></title>
      <url>http://yoursite.com/2016/10/09/%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E7%BB%B4%E6%8A%A4GitHub%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>在实际工作生活中，我们可能不一定仅仅在一台电脑上编码，比如：我们平时在单位电脑1上写代码，提交代码到github账户，而我们也可能会在在家里的电脑2上继续工作，提交代码，这样就是在不同的电脑上提交代码到同一个github账户，同时在每一台电脑上都保持和github账户的一致，该怎么办呢？<br><a id="more"></a></p>
<h3 id="Step1-首先在电脑2上完成git的安装和配置"><a href="#Step1-首先在电脑2上完成git的安装和配置" class="headerlink" title="Step1:首先在电脑2上完成git的安装和配置"></a>Step1:首先在电脑2上完成git的安装和配置</h3><p>具体安装配置与电脑1上的一样，其中用户名和邮箱可以使用电脑1的用户名和邮箱，也可以设置为其他用户名和邮箱。配置邮箱操作如下：</p>
<ol>
<li>装完成后，开发“Git Bash”，弹出一个git命令行窗口</li>
<li>在弹出的git命令行窗口输入：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/img/gitconfig.jpg" alt="gitconfig"></p>
<h3 id="Step2-在电脑2上创建SSH-Key"><a href="#Step2-在电脑2上创建SSH-Key" class="headerlink" title="Step2:在电脑2上创建SSH Key"></a>Step2:在电脑2上创建SSH Key</h3><ol>
<li><p>打开Shell（Windows下打开Git Bash），输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div></pre></td></tr></table></figure>
</li>
<li><p>然后一路回车，无需设置密码。</p>
</li>
<li>然后在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，id_rsa是私钥，不能泄露，id_rsa.pub是公钥，可以放心告诉别人.</li>
<li>登陆Github，进入settings,点击SSH Keys.</li>
<li>点击New SSH Key,填写任意Title，在Key文本框粘贴电脑2的id_rsa.pub文件的内容,然后点add Key。(<em>由于电脑1的SSH Key已经上传，所以可以看到已经有一个SSH Key了，这个SSH key是电脑1的，为了创建电脑2的SSH Key</em>）<h3 id="Step3-将远程库克隆到本地电脑2上"><a href="#Step3-将远程库克隆到本地电脑2上" class="headerlink" title="Step3:将远程库克隆到本地电脑2上"></a>Step3:将远程库克隆到本地电脑2上</h3></li>
<li>进入项目目录，git bash进入命令行模式</li>
<li><p>输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:kaysonyao/test.git</div></pre></td></tr></table></figure>
</li>
<li><p>进入该目录，可以看到test文件夹，远程的代码已经被克隆到本地电脑2上了。<br>这样就可在在电脑2上对代码进行修改、提交等操作了，每次git push将本地修改提交到远程后，远程代码就发生了改变。</p>
<h3 id="Step4：当在电脑1上工作时，本地代码和远程的代码发生了不一致，为了保持同步，所以需要将远程的代码同步到本地电脑1上"><a href="#Step4：当在电脑1上工作时，本地代码和远程的代码发生了不一致，为了保持同步，所以需要将远程的代码同步到本地电脑1上" class="headerlink" title="Step4：当在电脑1上工作时，本地代码和远程的代码发生了不一致，为了保持同步，所以需要将远程的代码同步到本地电脑1上"></a>Step4：当在电脑1上工作时，本地代码和远程的代码发生了不一致，为了保持同步，所以需要将远程的代码同步到本地电脑1上</h3></li>
<li><p>从远程的origin的master主分支下载最新的版本到origin/master分支上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch origin master</div></pre></td></tr></table></figure>
</li>
<li><p>然后比较本地的master分支和origin/master分支的差别</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> -p master..origin/master</div></pre></td></tr></table></figure>
</li>
<li><p>最后进行合并</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge origin/master</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Git上传代码至GitHub]]></title>
      <url>http://yoursite.com/2016/10/09/%E4%BD%BF%E7%94%A8Git%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E8%87%B3GitHub/</url>
      <content type="html"><![CDATA[<p>将新建的代码上传至github<br><a id="more"></a></p>
<h3 id="第一步：建立git仓库"><a href="#第一步：建立git仓库" class="headerlink" title="第一步：建立git仓库"></a>第一步：建立git仓库</h3><p>cd到你的本地项目根目录下，执行git命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<h3 id="第二步：将项目的所有文件添加到仓库中"><a href="#第二步：将项目的所有文件添加到仓库中" class="headerlink" title="第二步：将项目的所有文件添加到仓库中"></a>第二步：将项目的所有文件添加到仓库中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
<p>如果想添加某个特定的文件，只需把.换成特定的文件名即可</p>
<h3 id="第三步：将add的文件commit到仓库"><a href="#第三步：将add的文件commit到仓库" class="headerlink" title="第三步：将add的文件commit到仓库"></a>第三步：将add的文件commit到仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"注释语句"</span></div></pre></td></tr></table></figure>
<h3 id="第四步：去github上创建自己的Repository，创建页面如下图所示："><a href="#第四步：去github上创建自己的Repository，创建页面如下图所示：" class="headerlink" title="第四步：去github上创建自己的Repository，创建页面如下图所示："></a>第四步：去github上创建自己的Repository，创建页面如下图所示：</h3><p><img src="/img/create_repository.jpg" alt="create_repository"></p>
<p>点击下面的Create repository，就会进入到类似下面的一个页面,如下图所示：</p>
<p><img src="/img/test1_repository.jpg" alt="test1_repository"></p>
<p>点击右侧Clone or download 按钮，下面红色框里的地址就是创建的仓库的地址</p>
<h3 id="第五步：将本地的仓库关联到github上"><a href="#第五步：将本地的仓库关联到github上" class="headerlink" title="第五步：将本地的仓库关联到github上"></a>第五步：将本地的仓库关联到github上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:kaysonyao/<span class="built_in">test</span>1.git</div></pre></td></tr></table></figure>
<p>origin后面的链接地址换成你自己的仓库url地址，也就是上面红框中标出来的地址</p>
<h3 id="第六步：上传github之前，要先pull一下，执行如下命令："><a href="#第六步：上传github之前，要先pull一下，执行如下命令：" class="headerlink" title="第六步：上传github之前，要先pull一下，执行如下命令："></a>第六步：上传github之前，要先pull一下，执行如下命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master</div></pre></td></tr></table></figure>
<p>敲回车后，会执行输出类似如下页面 </p>
<p><img src="/img/gitpull.jpg" alt="gitpull"></p>
<h3 id="第七步：上传代码到github远程仓库"><a href="#第七步：上传代码到github远程仓库" class="headerlink" title="第七步：上传代码到github远程仓库"></a>第七步：上传代码到github远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>执行完后，如果没有异常，等待执行完就上传成功了，中间可能会让你输入Username和Password，你只要输入github的账号和密码就行了</p>
<p><img src="/img/gitpush.jpg" alt="gitpush"><br><img src="/img/uploadcode.jpg" alt="uploadcode"></p>
]]></content>
    </entry>
    
  
  
</search>
