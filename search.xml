<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用仓库分支管理Hexo网站和代码]]></title>
      <url>http://yoursite.com/2016/10/09/%E4%BD%BF%E7%94%A8%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86Hexo%E7%BD%91%E7%AB%99%E5%92%8C%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>搭建完Hexo后，一直在同一台PC上更新，想到如果换了电脑就不好继续了。最初的做法是建立新的仓库，将代码放到新仓库，每次修改后hexo d 部署到就仓库，然后push代码到新仓库，虽然不用修改配置，但总觉得GitHub上建了2个Repositories不是很爽，所以使用了同一个repositorie的不同分支来部署Hexo和代码。<br><a id="more"></a></p>
<p>##前言<br>由于hexo在本地已经安装并且网站已部署到GitHub，而且对git不是很熟，我选择保留本地代码删除重建GitHub上repository</p>
<h3 id="新建repository"><a href="#新建repository" class="headerlink" title="新建repository"></a>新建repository</h3><p>因为我是删除了原本的repository重头开始，所以这边需要新建一个新的，repository名称部署成功过的都知道，如果不是用二级域名访问，就需要yourname.github.io的形式：<br><img src="/img/createnew.jpg" alt="createnew"><br><em>建议勾上Readme.md，这样默认就创建了master分支</em></p>
<h3 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h3><ol>
<li>打开gitbash，进入hexo目录</li>
<li><p>建立git仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
</li>
<li><p>将项目的所有文件添加到仓库中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果想添加某个特定的文件，只需把.换成特定的文件名即可</p>
<ol>
<li>将add的文件commit到仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"注释语句"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="将本地的仓库关联到github上"><a href="#将本地的仓库关联到github上" class="headerlink" title="将本地的仓库关联到github上"></a>将本地的仓库关联到github上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:kaysonyao/kaysonyao.github.io.git</div></pre></td></tr></table></figure>
<h3 id="将远程分支文件拉下来（避免冲突）"><a href="#将远程分支文件拉下来（避免冲突）" class="headerlink" title="将远程分支文件拉下来（避免冲突）"></a>将远程分支文件拉下来（避免冲突）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master</div></pre></td></tr></table></figure>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>创建本地hexo分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch hexo</div></pre></td></tr></table></figure></p>
<h3 id="切换至hexo分支"><a href="#切换至hexo分支" class="headerlink" title="切换至hexo分支"></a>切换至hexo分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout hexo</div></pre></td></tr></table></figure>
<h3 id="将本地资源同步推到GitHub的Hexo分支（自己创建）"><a href="#将本地资源同步推到GitHub的Hexo分支（自己创建）" class="headerlink" title="将本地资源同步推到GitHub的Hexo分支（自己创建）"></a>将本地资源同步推到GitHub的Hexo分支（自己创建）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin hexo</div></pre></td></tr></table></figure>
<p><strong>至此hexo代码已经上传至远程仓库的hexo分支</strong></p>
<h2 id="hexo发布"><a href="#hexo发布" class="headerlink" title="hexo发布"></a>hexo发布</h2><p>hexo发布和之前没有区别，因为没有切换环境，所以不需要重新安装nodejs、hexo等<br>仍然可使用 hexo g -d  来部署<br><strong>注意</strong> _config.yml 文件依旧需要保持原地址和master分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">repository: https://github.com/kaysonyao/kaysonyao.github.io.git</div><div class="line">branch: master</div></pre></td></tr></table></figure></p>
<p>##</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用多台电脑维护GitHub代码]]></title>
      <url>http://yoursite.com/2016/10/09/%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E7%BB%B4%E6%8A%A4GitHub%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>在实际工作生活中，我们可能不一定仅仅在一台电脑上编码，比如：我们平时在单位电脑1上写代码，提交代码到github账户，而我们也可能会在在家里的电脑2上继续工作，提交代码，这样就是在不同的电脑上提交代码到同一个github账户，同时在每一台电脑上都保持和github账户的一致，该怎么办呢？<br><a id="more"></a></p>
<h3 id="Step1-首先在电脑2上完成git的安装和配置"><a href="#Step1-首先在电脑2上完成git的安装和配置" class="headerlink" title="Step1:首先在电脑2上完成git的安装和配置"></a>Step1:首先在电脑2上完成git的安装和配置</h3><p>具体安装配置与电脑1上的一样，其中用户名和邮箱可以使用电脑1的用户名和邮箱，也可以设置为其他用户名和邮箱。配置邮箱操作如下：</p>
<ol>
<li>装完成后，开发“Git Bash”，弹出一个git命令行窗口</li>
<li>在弹出的git命令行窗口输入：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/img/gitconfig.jpg" alt="gitconfig"></p>
<h3 id="Step2-在电脑2上创建SSH-Key"><a href="#Step2-在电脑2上创建SSH-Key" class="headerlink" title="Step2:在电脑2上创建SSH Key"></a>Step2:在电脑2上创建SSH Key</h3><ol>
<li><p>打开Shell（Windows下打开Git Bash），输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div></pre></td></tr></table></figure>
</li>
<li><p>然后一路回车，无需设置密码。</p>
</li>
<li>然后在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，id_rsa是私钥，不能泄露，id_rsa.pub是公钥，可以放心告诉别人.</li>
<li>登陆Github，进入settings,点击SSH Keys.</li>
<li>点击New SSH Key,填写任意Title，在Key文本框粘贴电脑2的id_rsa.pub文件的内容,然后点add Key。(<em>由于电脑1的SSH Key已经上传，所以可以看到已经有一个SSH Key了，这个SSH key是电脑1的，为了创建电脑2的SSH Key</em>）<h3 id="Step3-将远程库克隆到本地电脑2上"><a href="#Step3-将远程库克隆到本地电脑2上" class="headerlink" title="Step3:将远程库克隆到本地电脑2上"></a>Step3:将远程库克隆到本地电脑2上</h3></li>
<li>进入项目目录，git bash进入命令行模式</li>
<li><p>输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:kaysonyao/test.git</div></pre></td></tr></table></figure>
</li>
<li><p>进入该目录，可以看到test文件夹，远程的代码已经被克隆到本地电脑2上了。<br>这样就可在在电脑2上对代码进行修改、提交等操作了，每次git push将本地修改提交到远程后，远程代码就发生了改变。</p>
<h3 id="Step4：当在电脑1上工作时，本地代码和远程的代码发生了不一致，为了保持同步，所以需要将远程的代码同步到本地电脑1上"><a href="#Step4：当在电脑1上工作时，本地代码和远程的代码发生了不一致，为了保持同步，所以需要将远程的代码同步到本地电脑1上" class="headerlink" title="Step4：当在电脑1上工作时，本地代码和远程的代码发生了不一致，为了保持同步，所以需要将远程的代码同步到本地电脑1上"></a>Step4：当在电脑1上工作时，本地代码和远程的代码发生了不一致，为了保持同步，所以需要将远程的代码同步到本地电脑1上</h3></li>
<li><p>从远程的origin的master主分支下载最新的版本到origin/master分支上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch origin master</div></pre></td></tr></table></figure>
</li>
<li><p>然后比较本地的master分支和origin/master分支的差别</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> -p master..origin/master</div></pre></td></tr></table></figure>
</li>
<li><p>最后进行合并</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge origin/master</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Git上传代码至GitHub]]></title>
      <url>http://yoursite.com/2016/10/09/%E4%BD%BF%E7%94%A8Git%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E8%87%B3GitHub/</url>
      <content type="html"><![CDATA[<p>将新建的代码上传至github<br><a id="more"></a></p>
<h3 id="第一步：建立git仓库"><a href="#第一步：建立git仓库" class="headerlink" title="第一步：建立git仓库"></a>第一步：建立git仓库</h3><p>cd到你的本地项目根目录下，执行git命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<h3 id="第二步：将项目的所有文件添加到仓库中"><a href="#第二步：将项目的所有文件添加到仓库中" class="headerlink" title="第二步：将项目的所有文件添加到仓库中"></a>第二步：将项目的所有文件添加到仓库中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
<p>如果想添加某个特定的文件，只需把.换成特定的文件名即可</p>
<h3 id="第三步：将add的文件commit到仓库"><a href="#第三步：将add的文件commit到仓库" class="headerlink" title="第三步：将add的文件commit到仓库"></a>第三步：将add的文件commit到仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"注释语句"</span></div></pre></td></tr></table></figure>
<h3 id="第四步：去github上创建自己的Repository，创建页面如下图所示："><a href="#第四步：去github上创建自己的Repository，创建页面如下图所示：" class="headerlink" title="第四步：去github上创建自己的Repository，创建页面如下图所示："></a>第四步：去github上创建自己的Repository，创建页面如下图所示：</h3><p><img src="/img/create_repository.jpg" alt="create_repository"></p>
<p>点击下面的Create repository，就会进入到类似下面的一个页面,如下图所示：</p>
<p><img src="/img/test1_repository.jpg" alt="test1_repository"></p>
<p>点击右侧Clone or download 按钮，下面红色框里的地址就是创建的仓库的地址</p>
<h3 id="第五步：将本地的仓库关联到github上"><a href="#第五步：将本地的仓库关联到github上" class="headerlink" title="第五步：将本地的仓库关联到github上"></a>第五步：将本地的仓库关联到github上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:kaysonyao/<span class="built_in">test</span>1.git</div></pre></td></tr></table></figure>
<p>origin后面的链接地址换成你自己的仓库url地址，也就是上面红框中标出来的地址</p>
<h3 id="第六步：上传github之前，要先pull一下，执行如下命令："><a href="#第六步：上传github之前，要先pull一下，执行如下命令：" class="headerlink" title="第六步：上传github之前，要先pull一下，执行如下命令："></a>第六步：上传github之前，要先pull一下，执行如下命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master</div></pre></td></tr></table></figure>
<p>敲回车后，会执行输出类似如下页面 </p>
<p><img src="/img/gitpull.jpg" alt="gitpull"></p>
<h3 id="第七步：上传代码到github远程仓库"><a href="#第七步：上传代码到github远程仓库" class="headerlink" title="第七步：上传代码到github远程仓库"></a>第七步：上传代码到github远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>执行完后，如果没有异常，等待执行完就上传成功了，中间可能会让你输入Username和Password，你只要输入github的账号和密码就行了</p>
<p><img src="/img/gitpush.jpg" alt="gitpush"><br><img src="/img/uploadcode.jpg" alt="uploadcode"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用GitHub搭建Hexo博客]]></title>
      <url>http://yoursite.com/2016/09/06/%E4%BD%BF%E7%94%A8GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>一直纠结于哪里写博客，曾用过百度空间，JavaEye，OSChina，cnblogs，CSDN，觉累不爱。直到多看了一眼hexo，这个逼格极高的程序猿写作方式。就连hexo的发音都像是黑客哦！如果你跟我一样纠结哪里写博，那就来到GitHub吧，让我们一起hexo！<br><a id="more"></a></p>
<h1 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h1><p>这是一篇使用GitHub Pages和Hexo搭建免费独立博客的总结。</p>
<p>作为一个前端小白，虽说是个码农，但是一开始照着网上的各种教程去搭建的时候，还是云里雾里的。记得几个月前刚接触GitHub（哈哈，对大四来说确实有点晚），对版本控制一点概念都没有，更别说使用GitHub Page能做出一个好看又好用的博客了。所以第一次的尝试失败了。</p>
<p>后来的两三个月里，开始逐渐地把日常的学习都迁移到GitHub上进行，慢慢熟悉了Git的版本控制。之后，因为嫌弃csdn和博客园的样子（颜值控），最终又回归到搭建独立博客的光明大道上。</p>
<p>我所总结的是单纯地利用GitHub Pages搭建自己独立博客的过程，并没有额外使用独立域名之类的（谁让我现在还没工资 o(^▽^)o ）。</p>
<!-- more -->
<p>如果是小小白，可以先花时间去了解下：</p>
<ul>
<li><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">Git</a></li>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub</a></li>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></li>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></li>
<li><a href="http://www.appinn.com/markdown/#autoescape" target="_blank" rel="external">Markdown</a></li>
</ul>
<h1 id="二、-必要配置"><a href="#二、-必要配置" class="headerlink" title="二、 必要配置"></a>二、 必要配置</h1><h2 id="2-1-GitHub-Pages-仓库"><a href="#2-1-GitHub-Pages-仓库" class="headerlink" title="2.1 GitHub Pages 仓库"></a>2.1 GitHub Pages 仓库</h2><h3 id="2-1-1-创建对应仓库"><a href="#2-1-1-创建对应仓库" class="headerlink" title="2.1.1 创建对应仓库"></a>2.1.1 创建对应仓库</h3><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username是你的账号名)。</p>
<p>在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。</p>
<p>简单来说，User Pages 与 Project Pages的区别是：</p>
<ol>
<li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li>
<li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li>
<li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li>
<li>User Pages 通过 http(s)://username.github.io  进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。</li>
</ol>
<h3 id="2-1-2-相关资料"><a href="#2-1-2-相关资料" class="headerlink" title="2.1.2 相关资料"></a>2.1.2 相关资料</h3><ul>
<li><a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">GitHub Pages Basics / User, Organization, and Project Pages</a></li>
</ul>
<h2 id="2-2-Git"><a href="#2-2-Git" class="headerlink" title="2.2 Git"></a>2.2 Git</h2><h3 id="2-2-1-安装-Git"><a href="#2-2-1-安装-Git" class="headerlink" title="2.2.1 安装 Git"></a>2.2.1 安装 Git</h3><p>在windows下安装git比较常用的有两种方式：</p>
<ol>
<li><a href="http://git-scm.com/download/win" target="_blank" rel="external">Git 官方版本的安装</a></li>
<li><a href="https://desktop.github.com/" target="_blank" rel="external">GitHub for Windows</a></li>
</ol>
<h3 id="2-2-2-配置-Git"><a href="#2-2-2-配置-Git" class="headerlink" title="2.2.2 配置 Git"></a>2.2.2 配置 Git</h3><p>当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"username"</span></div><div class="line">$ git config --global user.email <span class="string">"username@example.com"</span></div></pre></td></tr></table></figure>
<p>对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private:</p>
<ol>
<li>在GitHub右上方点击你的头像，选择”Settings”；</li>
<li>在右边的”Personal settings”侧边栏选择”Emails”；</li>
<li>选择”Keep my email address private”。</li>
</ol>
<p>这样，你就可以使用如下格式的email进行配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.email <span class="string">"username@users.noreply.github.com"</span></div></pre></td></tr></table></figure>
<h3 id="2-2-3-相关资料"><a href="#2-2-3-相关资料" class="headerlink" title="2.2.3 相关资料"></a>2.2.3 相关资料</h3><ul>
<li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external">安装 Git</a></li>
<li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="external">配置 Git</a></li>
<li><a href="https://help.github.com/articles/setting-your-email-in-git/" target="_blank" rel="external">Setting your email in Git</a></li>
<li><a href="https://help.github.com/articles/keeping-your-email-address-private/" target="_blank" rel="external">Keeping your email address private
</a></li>
</ul>
<h2 id="2-3-Git-与-GitHub"><a href="#2-3-Git-与-GitHub" class="headerlink" title="2.3 Git 与 GitHub"></a>2.3 Git 与 GitHub</h2><h3 id="2-3-1-git与github的区别"><a href="#2-3-1-git与github的区别" class="headerlink" title="2.3.1 git与github的区别"></a>2.3.1 git与github的区别</h3><p>这里，我们要区分清楚git与github。</p>
<p>git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。</p>
<h3 id="2-3-2-与github建立联系"><a href="#2-3-2-与github建立联系" class="headerlink" title="2.3.2 与github建立联系"></a>2.3.2 与github建立联系</h3><p>为了能够在本地使用git管理github上的项目，需要进行一些配置，这里介绍SSH的方法。</p>
<h4 id="2-3-2-1-检查电脑是否已经有SSH-keys。"><a href="#2-3-2-1-检查电脑是否已经有SSH-keys。" class="headerlink" title="2.3.2.1 检查电脑是否已经有SSH keys。"></a>2.3.2.1 检查电脑是否已经有SSH keys。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls -al ~/.ssh</div><div class="line"><span class="comment"># Lists the files in your .ssh directory, if they exist</span></div></pre></td></tr></table></figure>
<p>默认情况下，public keys的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有public和private钥匙对（例如id_ras.pub和id_rsa），证明已存在SSH keys。</p>
<h4 id="2-3-2-2-如果没有SSH-key，则生成新的SSH-key。"><a href="#2-3-2-2-如果没有SSH-key，则生成新的SSH-key。" class="headerlink" title="2.3.2.2 如果没有SSH key，则生成新的SSH key。"></a>2.3.2.2 如果没有SSH key，则生成新的SSH key。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></div><div class="line"><span class="comment"># Creates a new ssh key, using the provided email as a label</span></div></pre></td></tr></table></figure>
<p>之后一路回车即可。</p>
<h4 id="2-3-2-3-向ssh-agent添加key。"><a href="#2-3-2-3-向ssh-agent添加key。" class="headerlink" title="2.3.2.3 向ssh-agent添加key。"></a>2.3.2.3 向ssh-agent添加key。</h4><p>首先确保ssh-agent可运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># start the ssh-agent in the background</span></div><div class="line">$ ssh-agent <span class="_">-s</span></div></pre></td></tr></table></figure></p>
<p>然后添加SSH key：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>
<h4 id="2-3-2-4-在GitHub添加SSH-key。"><a href="#2-3-2-4-在GitHub添加SSH-key。" class="headerlink" title="2.3.2.4 在GitHub添加SSH key。"></a>2.3.2.4 在GitHub添加SSH key。</h4><p>首先，拷贝key：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">clip &lt; ~/.ssh/id_rsa.pub</div><div class="line"><span class="comment"># Copies the contents of the id_rsa.pub file to your cllipboard</span></div></pre></td></tr></table></figure></p>
<p>然后，在GitHub右上方点击头像，选择”Settings”，在右边的”Personal settings”侧边栏选择”SSH Keys”。接着粘贴key，点击”Add key”按钮。最后，测试链接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line"><span class="comment"># Attempts to ssh to GitHub</span></div></pre></td></tr></table></figure></p>
<p>如果你看到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></div><div class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure></p>
<p>就键入：yes。之后将会看到如下信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not</span></div><div class="line">provide shell access.</div></pre></td></tr></table></figure></p>
<h3 id="2-3-3-相关资料"><a href="#2-3-3-相关资料" class="headerlink" title="2.3.3 相关资料"></a>2.3.3 相关资料</h3><ul>
<li><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">Generating SSH keys</a></li>
</ul>
<h2 id="2-4-Hexo"><a href="#2-4-Hexo" class="headerlink" title="2.4 Hexo"></a>2.4 Hexo</h2><h3 id="2-4-1-安装Hexo"><a href="#2-4-1-安装Hexo" class="headerlink" title="2.4.1 安装Hexo"></a>2.4.1 安装Hexo</h3><p>安装Hexo相当简单。在安装之前，必须检查电脑中是否已经安装下列应用程序：</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a><br>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-4-2-使用Hexo建站"><a href="#2-4-2-使用Hexo建站" class="headerlink" title="2.4.2 使用Hexo建站"></a>2.4.2 使用Hexo建站</h3><p>安装完后，在你喜欢的文件夹内（例如D：\Hexo），点击鼠标右键选择Git bash，输入以下指令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>这样，我们就已经搭建起本地的Hexo博客了。可以先执行以下命令（在对应文件夹下），然后再浏览器输入localhost:4000查看。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>这个博客只是本地的，别人是浏览不了的，之后需要部署到GitHub上。</p>
<h3 id="2-4-3-相关资料"><a href="#2-4-3-相关资料" class="headerlink" title="2.4.3 相关资料"></a>2.4.3 相关资料</h3><ul>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 官方文档</a></li>
</ul>
<h2 id="三、一般的搭建方法"><a href="#三、一般的搭建方法" class="headerlink" title="三、一般的搭建方法"></a>三、一般的搭建方法</h2><p>在上面，我们已经配置好了所需的所有东西，也成功地搭建了一个本地Hexo博客。现在，需要使用GitHub Pages搭建一个别人能够访问的Hexo博客了。</p>
<h3 id="3-1-使用默认theme"><a href="#3-1-使用默认theme" class="headerlink" title="3.1 使用默认theme"></a>3.1 使用默认theme</h3><p>我们继续使用上面的文件夹D:\Hexo（也可以新建一个文件夹重新生成），然后编辑该文件夹下的_config.yml。</p>
<p>默认生成的_config.yml：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>:</div></pre></td></tr></table></figure></p>
<p>修改后的_config.yml：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: 对应仓库的SSH地址（可以在GitHub对应的仓库中复制）</div><div class="line">  branch: 分支（User Pages为master，Project Pages为gh-pages）</div></pre></td></tr></table></figure></p>
<p>为了能够使Hexo部署到GitHub上，需要安装一个插件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>然后，执行下列指令即可完成部署：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>之后，可以通过在浏览器键入：username.github.io进行浏览，开心吧~</p>
<h3 id="3-2-其他theme"><a href="#3-2-其他theme" class="headerlink" title="3.2 其他theme"></a>3.2 其他theme</h3><p>如果想要使用其他主题，可以使用git clone将别人的主题拷贝到D:\Hexo\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字。</p>
<p>详细步骤可以参考网上的指南。</p>
<h2 id="四、-优化部署与管理"><a href="#四、-优化部署与管理" class="headerlink" title="四、 优化部署与管理"></a>四、 优化部署与管理</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。</p>
<p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦(╬▔皿▔)凸）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p>
<p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库(ˉ▽ˉ；)…）。</p>
<p>所以，我利用了分支！！！</p>
<p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p>
<p>下面以我的博客作为例子详细地讲述。</p>
<h3 id="4-2-我的博客搭建流程"><a href="#4-2-我的博客搭建流程" class="headerlink" title="4.2 我的博客搭建流程"></a>4.2 我的博客搭建流程</h3><ol>
<li>创建仓库，CrazyMilk.github.io；</li>
<li>创建两个分支：master 与 hexo；</li>
<li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li>
<li>使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库；</li>
<li>在本地CrazyMilk.github.io文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;</li>
<li>修改_config.yml中的deploy参数，分支应为master；</li>
<li>依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；</li>
<li>执行hexo generate -d生成网站并部署到GitHub上。</li>
</ol>
<p>这样一来，在GitHub上的CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！</p>
<h3 id="4-3-我的博客管理流程"><a href="#4-3-我的博客管理流程" class="headerlink" title="4.3 我的博客管理流程"></a>4.3 我的博客管理流程</h3><h4 id="4-3-1-日常修改"><a href="#4-3-1-日常修改" class="headerlink" title="4.3.1 日常修改"></a>4.3.1 日常修改</h4><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p>
<ol>
<li>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；</li>
<li>然后才执行hexo generate -d发布网站到master分支上。</li>
</ol>
<p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p>
<h4 id="4-3-2-本地资料丢失"><a href="#4-3-2-本地资料丢失" class="headerlink" title="4.3.2 本地资料丢失"></a>4.3.2 本地资料丢失</h4><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>
<ol>
<li>使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库（默认分支为hexo）；</li>
<li>在本地新拷贝的CrazyMilk.github.io文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</li>
</ol>
<h2 id="五、结尾"><a href="#五、结尾" class="headerlink" title="五、结尾"></a>五、结尾</h2><p>好累 (-.-)=3</p>
]]></content>
    </entry>
    
  
  
</search>
